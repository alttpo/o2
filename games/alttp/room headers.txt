// Entrance data:
//.room_id
//; writes to $A0, $048E
//#_02C577: dw $0104 ; 0x00

//.dungeon_id
//; writes to $040C
//#_02D1EF: db $FF ; 0x00

// Room Headers:
;===================================================================================================
; BG2PROP   0x41
; PALETTE   0x21
; BLKSET    0x13
; SPRSET    0x22
; BGMOVE    0x07
; EFFECT1   0x3D - Triforce Door
; EFFECT2   0x00 - Nothing
; PLANES1   0x00
; PLANES2   0x00
; WARP      0x10
; STAIRS0   0xC0 - leaked value
; STAIRS1   0x00 - leaked value
; STAIRS2   0x00 - leaked value
; STAIRS3   0x04 - leaked value
;---------------------------------------------------------------------------------------------------
RoomHeader_Room0000:
#_04F462: db $41, $21, $13, $22, $07, $3D, $00, $00, $00, $10


// Underworld_LoadHeader#_01B5D8
BG2PROP:
      $0414 <- ((x & $E0) shl 1) rol 3
      $046C <- ((x & $1C) shr 2)
    $7EC005 <- x & 1
PALETTE:
      $0AB6 <- (UnderworldPaletteSets+0)[x << 2]
      $0AAC <- (UnderworldPaletteSets+1)[x << 2]
      $0AAD <- (UnderworldPaletteSets+2)[x << 2]
      $0AAE <- (UnderworldPaletteSets+3)[x << 2]
BLKSET:
      $0AA2 <- x
SPRSET:
      $0AA3 <- x + $40
BGMOVE:  (aka BGFX)
        $AD <- x
EFFECT1: (aka TAG1)
        $AE <- x
EFFECT2: (aka TAG2)
        $AF <- x
PLANES1:
      $063C <- x & $03
      $063D <- (x & $0C) >> 2
      $063E <- (x & $30) >> 4
      $063F <- ((x & $C0) << 1) rol 2
PLANES2:
      $0640 <- x & $03
WARP:
    $7EC000 <- x
STAIRS0:
    $7EC001 <- x
STAIRS1:
    $7EC002 <- x
STAIRS2:
    $7EC003 <- x
STAIRS3:
    $7EC004 <- x

// load doors:
    // from every entrance, discover reachable supertiles:
    //RoomData_DoorDataPointers:
    //#_1F83C0: dl RoomDataDoors_0000
    //#_1F83C3: dl RoomDataDoors_0001

    //doordata:
    //#_1F8792: db $61, $18 ; Door 0x18 | Dir:01 | Pos:0C
    //#_1F8794: db $FF, $FF ; Layer03 / End
    // $61 >> 3 == $0C (pos)
    // $61  & 7 == $01 (dir)

    // doordata contains a `pos` element which is looked up in one of these tables:
    //DoorTileMapPositions_NorthWall:
    //#_00997E: dw $021C

    //; Door types TODO
    //DOOR0TYPE       = $7E1980
    //DOOR0DIRT       = $7E1981
    $1980 [16]uint16 // door types, list ends at #$xx00

    // door types:
    ; 0x00 - Normal door
    ; 0x02 - Normal door (lower layer)
    ; 0x04 - Exit (lower layer)
    ; 0x06 - Unused cave exit (lower layer)
    ; 0x08 - Waterfall door
    ; 0x0A - Fancy dungeon exit
    ; 0x0C - Fancy dungeon exit (lower layer)
    ; 0x0E - Cave exit
    ; 0x10 - Lit cave exit (lower layer)
    ; 0x12 - Exit marker
    ; 0x14 - Dungeon swap marker
    ; 0x16 - Layer swap marker
    ; 0x18 - Double sided shutter door
    ; 0x1A - Eye watch door
    ; 0x1C - Small key door
    ; 0x1E - Big key door
    ; 0x20 - Small key stairs (upwards)
    ; 0x22 - Small key stairs (downwards)
    ; 0x24 - Small key stairs (lower layer; upwards)
    ; 0x26 - Small key stairs (lower layer; downwards)
    ; 0x28 - Dash wall
    ; 0x2A - Bombable cave exit
    ; 0x2C - Unopenable, double-sided big key door
    ; 0x2E - Bombable door
    ; 0x30 - Exploding wall
    ; 0x32 - Curtain door
    ; 0x34 - Unusable bottom-sided shutter door
    ; 0x36 - Bottom-sided shutter door
    ; 0x38 - Top-sided shutter door
    ; 0x3A - Unusable normal door (lower layer)
    ; 0x3C - Unusable normal door (lower layer)
    ; 0x3E - Unusable normal door (lower layer)
    ; 0x40 - Normal door (lower layer; used with one-sided shutters)
    ; 0x42 - Unused double-sided shutter
    ; 0x44 - Double-sided shutter (lower layer)
    ; 0x46 - Explicit room door
    ; 0x48 - Bottom-sided shutter door (lower layer)
    ; 0x4A - Top-sided shutter door (lower layer)
    ; 0x4C - Unusable normal door (lower layer)
    ; 0x4E - Unusable normal door (lower layer)
    ; 0x50 - Unusable normal door (lower layer)
    ; 0x52 - Unusable bombed-open door (lower layer)
    ; 0x54 - Unusable glitchy door (lower layer)
    ; 0x56 - Unusable glitchy door (lower layer)
    ; 0x58 - Unusable normal door (lower layer)
    ; 0x5A - Unusable glitchy/stairs up (lower layer)
    ; 0x5C - Unusable glitchy/stairs up (lower layer)
    ; 0x5E - Unusable glitchy/stairs up (lower layer)
    ; 0x60 - Unusable glitchy/stairs up (lower layer)
    ; 0x62 - Unusable glitchy/stairs down (lower layer)
    ; 0x64 - Unusable glitchy/stairs up (lower layer)
    ; 0x66 - Unusable glitchy/stairs down (lower layer)

    //; Door tile map location
    //DOOR0TMAPL      = $7E19A0
    //DOOR0TMAPH      = $7E19A1
    $19A0 [16]uint16 // door tilemap locations

    //; Door direction
    //;   0x00 - North
    //;   0x01 - South
    //;   0x02 - West
    //;   0x03 - East
    //DOOR0DIR        = $7E19C0
    //DOOR0DIRH       = $7E19C1
    $19C0 [16]uint16 // door direction, 0 = north, south, west, east

    // stairwells:
    $06B0 [4]uint16 // stair tilemap locations, (list ends at #$0000 ?)
    // $0438 = possible count of stairwells; relative index into $06B0, starting at #$0000


// load adjacent supertile's door table into WRAM:
LDA $A0
DEC A
TAX
; input:
;   X = supertile to load adjacent doors for
JSR Underworld_LoadAdjacentRoomDoors
; output:
;   Y = end index (in bytes) of adjacent room's door table
; writes to $1110[16] the raw door data
; writes to $1100 a bitflag of doors which satisfy:
;    (x & 0xFF00) == 0x4000
; or (x & 0xFF00) >= 0x0200
; i.e. if the door is currently OPEN (1) or CLOSED (0). uses SRAM room state to determine open status
